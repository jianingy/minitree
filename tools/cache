#!/usr/bin/env python
# -*- python -*-

import re

RE_VAR = re.compile("%{([a-zA-Z0-9._-]+)}")
MINITREE_SERVER = "http://localhost:8000"
DEBUG=True

def info(message): print message

def tree_send(node_path, data="", method="", mode="r"):
    import urllib2
    from cjson import decode as json_decode
    modemap = dict(c="PUT", r="GET", u="POST", d="DELETE")
    url = MINITREE_SERVER.rstrip("/") + "/node/" + node_path.replace(".", "/")
    if method:
        url = url + "?method=" + method
    opener = urllib2.build_opener(urllib2.HTTPHandler)
    request = urllib2.Request(url, data)
    request.get_method = lambda: modemap[mode]
    return json_decode(opener.open(request).read())

def _expand_var(v, node):
    if v[0] in node:
        if node[v[0]][0] == '@':
            node = tree_send(node[v[0]][1:])
            return _expand_var(v[1:], node)
        else:
            return node[v[0]]
    else:
        warn("`%s' not exists in node `%s'" % (v[0], reprt(node)))

def expand_var(pair, node):

    def _match(v, node):
        node_path = v.group(1).split(".")
        return _expand_var(node_path, node)

    key, value = pair
    expaneded = RE_VAR.sub(lambda x: _match(x, node), value)
    return (key, expaneded)

def build_cache(manifest_path):
    cache_path = "cache.manifest." + manifest_path.lstrip(".")
    manifest = tree_send(cache_path)
    target = manifest["__target__"]
    fields = filter(lambda x: not(x.startswith("__")
                                  and x.endswith("__")), manifest.keys())
    nodes = tree_send(target, method="children")
    for node_name in nodes:
        info("rebuilding `%s' ..." % node_name)
        node = tree_send(node_name)
        cache = dict(map(lambda x: expand_var(x, node),
                         map(lambda x: (x, manifest[x]), fields)))
        write_cache(cache)

def write_cache(cache):
    for k in cache:
        print k, cache[k].encode("UTF-8")

if __name__ == '__main__':
    import sys
    build_cache(sys.argv[1])
