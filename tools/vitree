#!/usr/bin/env python
# -*- python -*-
from yaml import safe_load as yaml_load, safe_dump as yaml_dump
from cjson import decode as json_decode, encode as json_encode
from tempfile import mkstemp
from urllib2 import HTTPError
import yaml
import os
import codecs

node_server = "http://localhost:8000"

def urlopen(url, data="", method="GET"):
    import urllib2
    opener = urllib2.build_opener(urllib2.HTTPHandler)
    request = urllib2.Request(url, data)
    request.get_method = lambda: method
    return opener.open(request)

def edit_file(tmpfile):
    editor = os.environ["EDITOR"]
    os.system("%s '%s'" % (editor, tmpfile))

def do_create(resource_path, tmpfile):
    edit_file(tmpfile)

    with codecs.open(tmpfile, "r", encoding="utf-8") as f:
        modifed_yaml = yaml_load(f.read())
        modifed_json = json_encode(modifed_yaml)
        ret = urlopen(resource_path, modifed_json, "PUT")
        ret_code = ret.getcode()
        ret_json = json_decode(ret.read())
        if ret_code == 200:
            print ret_json["success"]
            return True
        else:
            print ret_json["error"]
            return False


def do_edit(resource_path, tmpfile):

    stat = os.stat(tmpfile)
    if stat.st_ctime == stat.st_mtime:
        json = urlopen(resource_path).read()
        yaml = yaml_dump(json_decode(json), default_flow_style=False,
                         width=70, encoding="utf-8",
                         explicit_start=True, allow_unicode=True)

        with open(tmpfile, "w") as f:
            f.write(yaml)

    edit_file(tmpfile)

    with codecs.open(tmpfile, "r", encoding="utf-8") as f:
        modifed_yaml = yaml_load(f.read())
        modifed_json = json_encode(modifed_yaml)
        ret = urlopen(resource_path, modifed_json, "POST")
        ret_code = ret.getcode()
        ret_json = json_decode(ret.read())
        if ret_code == 200:
            print ret_json["success"]
            return True
        else:
            print ret_json["error"]
            return False

def node2resource(node_path):
    return "/node/" + node_path.replace(".", "/").rstrip("/")

def edit(node_path):
    resource_path = node_server.rstrip("/") + node2resource(node_path)
    fd, tmpfile = mkstemp(prefix="vitree-")
    os.close(fd)
    do_action = do_edit
    while do_action:
        try:
            if do_action(resource_path, tmpfile):
                do_action = None
        except HTTPError as e:
            if e.code == 404:
                do_action = do_create
                continue
            else:
                print "ERROR:", json_decode(e.read())["error"]
            do_action = None
        except yaml.scanner.ScannerError as e:
            print "ERROR: %s" % e
            do_action = do_edit
            raw_input("Press enter to edit again ... ")
            continue
        except:
	        if os.path.exists(tmpfile):
		   	    os.unlink(tmpfile)
        	raise
	if os.path.exists(tmpfile):
		os.unlink(tmpfile)

if __name__ == '__main__':
    import sys
    edit(sys.argv[1])

