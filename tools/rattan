#!/usr/bin/env python
# -*- python -*- 

from mako.template import Template

MINITREE_SERVER = "http://shake.corp.linuxnote.net:9999"
NODE_CACHE = dict()

def tree_send(node_path, data="", method="", mode="r"):
    import urllib2
    from cjson import decode as json_decode
    modemap = dict(c="PUT", r="GET", u="POST", d="DELETE")
    url = MINITREE_SERVER.rstrip("/") + "/node/" + node_path.replace(".", "/")
    if method:
        url = url + "?method=" + method
    opener = urllib2.build_opener(urllib2.HTTPHandler)
    request = urllib2.Request(url, data)
    request.get_method = lambda: modemap[mode]
    json = opener.open(request).read()
    return json_decode(json)

def expand_var(v, node):
    if v[0] in node:
        if node[v[0]][0] == '@':
            node = tree_send(node[v[0]][1:])
            return _expand_var(v[1:], node)
        else:
            return node[v[0]]
    else:
        warn("`%s' not exists in node `%s'" % (v, repr(node)))

def node(node_path, name):
    if node_path not in NODE_CACHE:
        NODE_CACHE[node_path] = tree_send(node_path, method="override")
    return NODE_CACHE[node_path][name]

def tmake(tpl):
    template = Template(filename=tpl)
    print template.render(node=node, expand_var=expand_var)

if __name__ == '__main__':
    import sys
    tmake(sys.argv[1])
